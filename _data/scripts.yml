# Template
#
# Card Name:
#   category:  # create groups
#   url:  # Home page
#   description: " # description"

Advanced Leaves:
  type: Particles
  usage: Script
  description: "Blowing leaves effect with per object rotation."
  body: "Works with any leaf sprite or even sakura petals. Can specify start and end location as well as approximate amount of sprites generated. Leaf sprites will generate randomized between two color options for added realism."
  example:  |
    //Declare variables
    string path = "sb/leaf.png";
    Vector2 StartPosition = new Vector2(-120, Random(-100, 480)); 
    Vector2 EndPosition = new Vector2(760, StartPosition.Y + 200); 
    Color4 Color1 = Color4.Green; Color4;
    Color2 = Color4.LightGreen;
    //Call function
    makeLeaf(51897,72897,StartPosition,EndPosition, 4, Color1, Color2, 0.8);"
  code:  |
    public void makeLeaf(string path, int Start, int End, Vector2 startpos, Vector2 endpos, int amt, Color4 color1, Color4 color2, double alpha){
        var Beat = Beatmap.GetTimingPointAt(Start).BeatDuration;
        for(double i = Start; i < End; i += Beat/8){
            var Sprite = GetLayer("Particles").CreateSprite(path);
            Vector2 Position = startpos;
            Vector2 EndPosition = endpos;
            Sprite.Move(i, i + 2000, Position, EndPosition);
            Sprite.Fade(i, i + 2000, 1, 1);
            Sprite.Fade(Start, End, alpha, alpha);
            Sprite.StartLoopGroup(i, amt);
            Sprite.ScaleVec(0, 500, 0.5, 0.5, 0.5, -0.5);
            Sprite.Rotate(0, 500, 0, Math.PI*2);
            Sprite.EndGroup();
            if(Random(0, 100)>50)
                Sprite.Color(i, Color4.Green);
            else Sprite.Color(i, Color4.LightGreen);
        }
    }
 

BG Parallax:
  type: Background
  usage: Script
  description: "Moves the background in the opposite direction of player cursor. As seen in Chata - enn. "
  body: "Creates a pretty sharp screen move effect. The background moves opposite to the direction of the next hitobjects, so in gameplay it looks like the background is parallax with the cursor. Script includes a parameter for start/end fade for smooth transitions. Fade out opacity can also be configured."
  example:   |
    var Beat = Beatmap.GetTimingPointAt(Start).BeatDuration;
    //usually a move amount of 0.015f is good, increase/decrease if needed
    parallaxer("bg.jpg",132748,132748+beat, 150431, 150431+beat,0,0.015f);
  code:   |
    public void parallaxer(string BackgroundPath, int StartFade, int StartTime, int EndTime, int EndFade, int EndOpacity, float amt){
        var bitmap = GetMapsetBitmap(BackgroundPath);
        var bg = GetLayer("bg").CreateSprite(BackgroundPath);
        bg.Scale(StartTime, (570.0f / bitmap.Height)+0.1);
        var Beat = Beatmap.GetTimingPointAt(Start).BeatDuration;
        Vector2 screenCenter = new Vector2(320,240);
        Vector2 Position;
        Vector2 oldPosition = screenCenter;
        Vector2 Direction;
        double lastTime = StartTime;
        bg.Fade(StartFade, StartTime, 0, 1);
        bg.Fade(EndTime, EndFade, 1, EndOpacity);
        foreach(var hitobject in Beatmap.HitObjects){
            if(hitobject.StartTime >= StartTime && hitobject.StartTime <= EndTime){
                Direction = (screenCenter+hitobject.Position)*amt;
                Position = screenCenter+Direction;
                bg.Move(OsbEasing.InOutQuad, lastTime, hitobject.StartTime, oldPosition, Position);      
                oldPosition = Position;
                lastTime = hitobject.StartTime;
            }
        }
    }

EZ Lyrics:
  type: Text
  usage: Configurable
  description: "A very easy to use Lyrics script. Plug and play, configure inside Storybrew. Requires a timed .ass file"
  body: "Made with help from PoNo. Commments by PoNo as well. Works as a Storybrew configurable. Load the effect in Storybrew and modify the values in the application."
  example: "Configureable"
  code:   |
    using OpenTK;
    using OpenTK.Graphics;
    using StorybrewCommon.Mapset;
    using StorybrewCommon.Scripting;
    using StorybrewCommon.Storyboarding;
    using StorybrewCommon.Storyboarding.Util;
    using StorybrewCommon.Subtitles;
    using StorybrewCommon.Util;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    namespace StorybrewScripts
    {
        public class LyricsSimplified : StoryboardObjectGenerator
        {
            [Configurable] public string SubtitlesPath;
            [Configurable] public string FontName = "Verdana";
            [Configurable] public int PosX = 320;
            [Configurable] public int PosY = 240;
            SubtitleSet Subtitles;
            FontGenerator Font;
            public override void Generate()
            {
                //Set the private variable subtitle to the subtitlefile info
                Subtitles = LoadSubtitles(SubtitlesPath);

                //Set the Font variable to the right fontGenerator
                Font = SetFont();

                //This launch the function for rendering our lyrics!
                GenerateSubtitles();
            }
            private FontGenerator SetFont()
            {
                //these line create a FontGenerator object that have the font parameters you want to be generated
                //this load the fontName, style, color, size etc etc... everything you see in the sb/f folder stuff is stored in that object
                var font = LoadFont("sb/f", new FontDescription{
                    FontPath = FontName,
                    FontSize = 100,
                    Color = Color4.White
                });

                //after setting the font we simply return it to the function! (this is why I can do Font = SetFont())
                return font;
            }
            private void GenerateSubtitles()
            {
                //First we loop into every lines of our lyrics file!
                foreach(var line in Subtitles.Lines)
                {
                    //For each line we're gonna set a base position to X = PosX & Y = PosY
                    //and also a scale that is set to 0.3 to not have stretched up sprites!
                    float LetterX = PosX;
                    float LetterY = PosY;
                    float scale = 0.3f;

                    //Once we're done with setting up all this things we're gonna split our lines into letters (HELLO WORLDS => H, E, L, L, O... etc..)
                    foreach(var letter in line.Text)
                    {
                        //so for each letter we link a texture, which, is the thing that gonna use the Font object we've created earlier to generate our sprite!!
                        var texture = Font.GetTexture(letter.ToString());

                        //We check if the texture isn't empty (white spaces)
                        if(!texture.IsEmpty)
                        {
                            //We set the position of each letter, and add an offset for them (to fix not aligned stuffs!)
                            var position = new Vector2(LetterX, LetterY)
                                + texture.OffsetFor(OsbOrigin.TopCentre) * scale;

                            //Now we're good! we can finally code our sprite methods! :)
                            var sprite = GetLayer("Foreground").CreateSprite(texture.Path, OsbOrigin.Centre, position);
                            sprite.Fade(line.StartTime, line.EndTime, 1, 1);
                            sprite.Scale(line.StartTime, scale);
                        }
                        //don't forget to move your letter position after each new letter!
                        LetterX += texture.BaseWidth * scale;
                    }
                }
            }
        }
    }

   